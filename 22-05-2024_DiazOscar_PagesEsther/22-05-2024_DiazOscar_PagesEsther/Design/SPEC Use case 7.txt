Use case Number: 7
Use case Name: ComputeFormula

Actors and their interests:
System

Preconditions:
- A spreadsheet is created.
- A cell is selected.
- The cell content is a formula.

Postconditions:
- Returns the computed value.

Main Success Scenario (Basic Flow):
1. The system tokenizes the formula.
2. The system checks the syntax of the formula
3. The system converts objects Token into operands and operators
4. The system checks circular dependency
5. The system generates the postfix expression
6. The system evaluates the postfix expression

Extension (Alternative Flow):
1.a The system detects that a token has not been written correctly.
	1. The system notifies an error with a token.
2.a The system detects a wrong syntax.
	1. The system notifies the wrong syntax.
4.a The system identifies a circular dependency.
	1. The system notifies a circular dependency.
6.a The system cannot evaluate the postfix expression.
	1. The system notifies and finalizes with an error with the generation of the postfix expression.

SPECIFICATIONS:
Value compute(String argument) throws TokenWrittenIncorrectlyException, WrongSyntaxException, CircularDependencyException, NoNumberException 
- Belongs to FormulaComputator class and is a pure fabrication GRASP, because it is not a controller, creator or polymorphic and expert GRASP decrease the coherence.
- Call the tokenize method with the input string and save the returned list of tokens. Call the check method. Call the specifyFormulaComponents for each token in the list and returns a list of FormulaComponent objects. Check the circular dependency with the method check and call the methods result of the PostfixEvaluator and PostfixGenerator classes and the functions return the value returned by the last one.

List<Token> tokenize(String argument) throws TokenWrittenIncorrectlyException 
- The GRASP pattern we think that would be a pure fabrication GRASP, with a Tokenizer class, because it is not a creator, polymorphic, expert without decrease coherence and increment coupling to any class, to this reason, we selected a pure fabrication GRASP.
- If it is possible, tokenize the argument of a formula and return the list of tokens, if not, throw an exception. 

void check() throws WrongSyntaxException
- Belongs to SyntaxChecker class and is a pure fabrication GRASP, because it is not a controller, creator or polymorphic and expert GRASP decrease the coherence.
- Checks the formula syntax and if it is not correct throws an exception.

List<FormulaComponent> specifyFormulaComponents() throws NoNumberException, TokenWrittenIncorrectlyException, WrongSyntaxException, CircularDependencyException
- Belongs to Specifier class and is a pure fabrication GRASP, because it is not a controller, creator or polymorphic and expert GRASP decrease the coherence.
- Checks if the component in a list of tokens is an operand or operator and returns the corresponding list of FormulaCompontent with the respect operator or operand.

void check() throws CircularDependencyException
- The GRASP pattern we think that would be a pure fabrication GRASP, in a CircularDependencyChecker class, because it is not a creator, polymorphic, expert without decrease coherence and increment coupling to any class, to this reason, we selected a pure fabrication GRASP.
- Checks for circular dependencies involving the specified cell. If it finds the circular dependency, throws a CircularDependencyException.

List<FormulaComponent> result() throws NoNumberException, TokenWrittenIncorrectlyException, WrongSyntaxException, CircularDependencyException
- It belongs to PostfixGenerator class as an expert GRASP, because it is not a controller, creator or polymorphic, and can be used in expert GRASP because it does not decrease the coherence.
- It generates the postfix expression using the Shunting-Yard algorithm,and if it is not possible, throws an exception.
